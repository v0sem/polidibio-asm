cmp ah, ENCODE
    jnz m_decode_proc

m_decode_proc:
	cmp ah, DECODE
	jnz m_print_matrix
	call decode_proc

	m_print_matrix:
	call print_matrix

end_end_rsi:
	mov ax,4C00H							; FIN DE PROGRAMA Y VUELTA AL DOS
	int 21H


print_matrix:
	push ax dx

	mov dx, offset polibio_b
	mov ah, 9
	int 21h

	pop dx ax

	ret

encode_proc:
	push bp
	mov bp, sp ; Create the stack
	push si di ax bx cx dx ; Push em

	mov bx, dx

	xor si, si
	main_loop:
		mov ch, [bx][si] ;~ Get character

		mov di, -1
		cmp ch, '$' ; if end line, complete program
		jz main_end

		check_table:
			inc di
			cmp ch, polibio[di] ; Check if character is in the table
			je found_char ; we found it bois

			cmp di, MAX_TAB ; did we check everything?
			jne check_table ; keep looking
			jmp print_error_rsi ; not found

		found_char:
		mov ax, di
		mov ch, ORDEN
		div ch ; Transform the code into 2 ASCII characters
		mov ch, ah
		mov cl, al

		print:

			mov ah, 2
			add cl, 31h
			mov dl, cl
			int 21h ; Print first

			mov ah, 2
			add ch, 31h
			mov dl, ch
			int 21h ; Print second

			print_space:
				mov ah, 2
				mov dl, ' '
				int 21h ; Print a space

		skip:
			inc si
			jmp main_loop ; Loop

	main_end:
		mov ah, 2
		mov dl, 13 ; Carriage
		int 21h

		mov ah, 2
		mov dl, 10 ; Newline
		int 21h

	pop dx cx bx ax di si bp

	ret

decode_proc:
	push bp
	mov bp, sp ; Create the stack
	push si di ax bx cx dx ; Push em

	xor si, si
    mov bx, dx

	get_char:
		mov al, [bx][si]
		xor ah, ah
		mov dl, 10
		div dl ; al primero, ah segundo

		dec al
		mov dl, ah ; guardar segundo digito
		dec bx

		; segundo + ORDEN * primero
		xor ah, ah
		mov cx, ORDEN
		mul cx ; ORDEN * primero
		add dx, ax ; + segundo

		xor ax, ax
        mov si, dx
		mov al, polibio[si]

		mov dl, [bx][si] ; load again to check if we are finished

		cmp dl, '$' ; Check if finished
		je finish_printing ; if we are finished, jump to cont

		mov dx, ax
		mov ah, 2
		int 21h

		inc si

		jmp get_char ; go back

	finish_printing:
		mov ah, 2
		mov dl, 13 ; Carriage
		int 21h

		mov ah, 2
		mov dl, 10 ; Newline
		int 21h

	pop dx cx bx ax di si bp	
	ret

print_error_rsi:
; takes no arguments and prints an error before exiting
; returns no arguments
	mov dx, offset error_str
	mov ah, 9h
	int 21h
	jmp end_end_rsi
